type Person {
  name: String!
  surname: String!
  email: String!
}

enum PersonRole {
  SUBMITTER,
  PI
}

enum Polarity {
  POSITIVE
  NEGATIVE
}

type Analyzer {
  type: String!
  resolvingPower(mz: Float!): Float!
}

enum AnnotationOrderBy {
  ORDER_BY_MZ
  ORDER_BY_MSM
  ORDER_BY_FDR_MSM
  ORDER_BY_DATASET
  ORDER_BY_FORMULA
}

enum DatasetOrderBy {
  ORDER_BY_DATE
  ORDER_BY_NAME
}

enum SortingOrder {
  ASCENDING,
  DESCENDING
}

enum JobStatus {
  QUEUED,
  STARTED,
  FINISHED,
  FAILED
}

enum AccessRights {
  VIEW
  EDIT
}

type Dataset {
  id: String!
  name: String!

  institution: String!
  submitter: Person!
  principalInvestigator: Person

  polarity: Polarity!
  ionisationSource: String!
  analyzer: Analyzer!

  organism: String
  organismPart: String
  condition: String
  growthConditions: String
  maldiMatrix: String

  configJson: String!
  # full metadata JSON conforming to schema published at
  # https://github.com/metaspace2020/metadata
  metadataJson: String!

  status: JobStatus
  inputPath: String
  uploadDateTime: String

  access: AccessRights!
}

type UserProfile {
  id: String!
  name: String!
  email: String!
  secondaryEmails: [String!]
  groups: [Group]
  projects: [Project]
}

type Group {
  id: String!
  name: String!
  institutionName: String!
  members: [UserProfile]!
  datasets: [Dataset]
  manager: UserProfile!
}

type Project {
  id: String!
  name: String!
  public: Boolean
  members: [UserProfile]!
  datasets: [Dataset]
  manager: UserProfile!
}

# fields of categorical type
enum DatasetAggField {
  DF_INSTITUTION,
  DF_SUBMITTER_FIRST_NAME,
  DF_SUBMITTER_SURNAME,
  DF_POLARITY,
  DF_ION_SOURCE,
  DF_ANALYZER_TYPE,
  DF_ORGANISM,
  DF_ORGANISM_PART,
  DF_CONDITION,
  DF_GROWTH_CONDITIONS,
  DF_MALDI_MATRIX
}

type CompoundInfoEntry {
  database: String!
  url: String
  databaseId: String!
}

type Compound {
  name: String!
  imageURL: String
  information: [CompoundInfoEntry]
  # TODO: InChi/SMILES, ClassyFire results
}

type Spectrum {
  mzs: [Float!]!
  intensities: [Float!]!
}

type MzImage {
  mz: Float
  url: String
  totalIntensity: Float!
  minIntensity: Float!
  maxIntensity: Float!
}

type MolecularDatabase {
  id: Int!
  name: String!
  version: String!
}

type Annotation {
  id: String!

  dataset: Dataset!
  sumFormula: String!
  adduct: String!
  mz: Float!
  possibleCompounds: [Compound!]!
  fdrLevel: Float!
  msmScore: Float!
  rhoSpatial: Float
  rhoSpectral: Float
  rhoChaos: Float
  isotopeImages: [MzImage!]!

  peakChartData: String  # JSON
}

# [min, max) interval
input NumericRange {
  min: Float!
  max: Float!
}

input AnnotationFilter {
  database: String
  datasetName: String
  mzFilter: NumericRange
  msmScoreFilter: NumericRange
  compoundQuery: String
  fdrLevel: Float
  sumFormula: String
  adduct: String
}

input PersonFilter {
  name: String!
  surname: String!
}

input DatasetFilter {
  # list of IDs separated by '|'
  ids: String

  # exact match
  institution: String

  # substring match
  name: String

  # exact match
  submitter: PersonFilter

  polarity: Polarity

  # exact match
  ionisationSource: String

  # exact match
  analyzerType: String

  # exact match
  maldiMatrix: String

  # exact match
  organism: String

  # exact match
  organismPart: String

  # exact match
  condition: String

  # exact match
  growthConditions: String

  status: JobStatus
}

input DatasetCountPerGroupInput {
  fields: [DatasetAggField!]!
  filter: DatasetFilter = {}
  simpleQuery: String
}

type DatasetCountPerGroupListElement {
  fieldValues: [String!]!  # corresponding to input fields
  count: Int!
}

type DatasetCountPerGroup {
  counts: [DatasetCountPerGroupListElement]
}

type RawOpticalImage {
    url: String
    transform: [[Float]]
}

input AddOpticalImageInput {
  datasetId: String!
  imageUrl: String!

  # 3x3 transformation matrix in row-major order
  # (acting in homogeneous coordinates)
  transform: [[Float]]!
}

type Query {
  dataset(id: String!): Dataset
  user(id: String!): UserProfile
  group(id: String!): Group
  project(id: String!): Project

  datasetByName(name: String!): Dataset

  allDatasets(orderBy: DatasetOrderBy = ORDER_BY_DATE,
              sortingOrder: SortingOrder = DESCENDING,
              filter: DatasetFilter = {}, simpleQuery: String,
              offset: Int = 0, limit: Int = 10): [Dataset!]!

  allAnnotations(orderBy: AnnotationOrderBy = ORDER_BY_MSM,
                 sortingOrder: SortingOrder = DESCENDING,
                 offset: Int = 0, limit: Int = 10,
                 filter: AnnotationFilter = {},
                 datasetFilter: DatasetFilter = {},
                 simpleQuery: String): [Annotation]

  countDatasets(filter: DatasetFilter = {}, simpleQuery: String): Int!

  countDatasetsPerGroup(query: DatasetCountPerGroupInput!): DatasetCountPerGroup!

  countAnnotations(filter: AnnotationFilter = {},
                   datasetFilter: DatasetFilter = {},
                   simpleQuery: String): Int!

  annotation(id: String!): Annotation

  metadataSuggestions(field: String!, query: String!, limit: Int = 10): [String!]!

  peopleSuggestions(role: PersonRole!, query: String!): [Person!]!

  molecularDatabases: [MolecularDatabase!]

  opticalImageUrl(datasetId: String!, zoom: Float = 1): String

  rawOpticalImage(datasetId: String!): RawOpticalImage
}

input UserProfileInput {
  id: String  # can differ from the id stored in the JWT, as group/project managers should be able to edit members' profiles
  name: String!
  email: String!
}

input DatasetInput {
  id: String!
  name: String!
  path: String!
  private: Boolean = true
  sync: Boolean = true
  priority: Int = 0
  deleteFirst: Boolean = false
  metadataJson: String  # absent => use currently stored metadata
}

enum Role {
  MEMBER
  ADMIN
}

type Status {
  success: Boolean!
  errorMessage: String
}

type Mutation {
  submitDataset(datasetId: String, name: String,
    path: String!, metadataJson: String!,
    priority: Int=0, sync: Boolean=true, delFirst: Boolean=false): String @deprecated(reason: "use createDataset instead")

  resubmitDataset(datasetId: String!,
    priority: Int=0, sync: Boolean=true): String @deprecated(reason: "use updateDataset instead")

  updateMetadata(datasetId: String!, metadataJson: String!,
    priority: Int=0, sync: Boolean=true): String @deprecated(reason: "use updateDataset instead")

  deleteDataset(datasetId: String!,
    delRawData: Boolean, sync: Boolean=true): String

  addOpticalImage(input: AddOpticalImageInput!): String

  createDataset(dataset: DatasetInput!): Status
  updateDataset(dataset: DatasetInput!): Status

  createUserProfile(user: UserProfileInput!): Status
  updateUserProfile(user: UserProfileInput!): Status
  deleteUserProfile: Status # users can only delete their own profiles

  addUserToGroup(userId: String!, groupId: String!, role: Role!): Status
  removeUserFromGroup(userId: String!, groupId: String!): Status

  createProject(name: String!, private: Boolean!): Status
  updateProject(id: String!, private: Boolean!): Status
  deleteProject(id: String!): Status
  addDatasetToProject(datasetId: String!, projectId: String!): Status
  removeDatasetFromProject(datasetId: String!, projectId: String!): Status
  addUserToProject(userId: String!, projectId: String!, role: Role!): Status
  removeUserFromProject(userId: String!, projectId: String!): Status

  askGroupInvitation(groupId: String!): Status
  askProjectInvitation(projectId: String!): Status
}

type DatasetStatusUpdate {
  dataset: Dataset!
}

type DatasetDeleteNotification {
  datasetId: String!
}

type Subscription {
  datasetStatusUpdated: DatasetStatusUpdate

  datasetDeleted: DatasetDeleteNotification
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
