type Person {
  name: String!
  surname: String!
  email: String!
}

enum Polarity {
  POSITIVE
  NEGATIVE
}

type Analyzer {
  type: String!
  resolvingPower(mz: Float!): Float!
}

enum AnnotationOrderBy {
  ORDER_BY_MZ
  ORDER_BY_MSM
  ORDER_BY_FDR_MSM
}

enum DatasetOrderBy {
  ORDER_BY_DATE
  ORDER_BY_NAME
}

enum SortingOrder {
  ASCENDING,
  DESCENDING
}

type Dataset {
  id: String
  name: String!

  institution: String!
  submitter: Person!
  principalInvestigator: Person

  polarity: Polarity!
  ionisationSource: String!
  analyzer: Analyzer!

  organism: String
  maldiMatrix: String

  # full metadata JSON conforming to schema published at
  # https://github.com/metaspace2020/metadata
  metadataJson: String!
}

type CompoundInfoEntry {
  database: String!
  url: String!
}

type Compound {
  name: String!
  imageURL: String
  information: [CompoundInfoEntry]
  # TODO: InChi/SMILES, ClassyFire results
}

type Spectrum {
  mzs: [Float!]!
  intensities: [Float!]!
}

type MzImage {
  mz: Float
  url: String
  totalIntensity: Float!  # FIXME: implement
}

type Annotation {
  id: String!

  dataset: Dataset!
  sumFormula: String!
  adduct: String!
  mz: Float!
  possibleCompounds: [Compound!]!
  fdrLevel: Float!
  msmScore: Float!
  rhoSpatial: Float
  rhoSpectral: Float
  rhoChaos: Float
  ionImage: MzImage!
  isotopeImages: [MzImage!]!

  peakChartData: String  # JSON
}

# [min, max) interval
input NumericRange {
  min: Float!
  max: Float!
}

input AnnotationFilter {
  database: String
  datasetName: String
  mzFilter: NumericRange
  msmScoreFilter: NumericRange
  compoundQuery: String
  fdrLevel: Float
  sumFormula: String
  adduct: String
}

input DatasetFilter {
  institution: String
  name: String
  submitter: String
  polarity: Polarity
  ionisationSource: String
  analyzerType: String
  maldiMatrix: String
  organism: String
}

type Query {
  dataset(id: String!): Dataset
  datasetByName(name: String!): Dataset

  allDatasets(orderBy: DatasetOrderBy = ORDER_BY_DATE,
              sortingOrder: SortingOrder = DESCENDING,
              filter: DatasetFilter = {},
              offset: Int = 0, limit: Int = 10): [Dataset!]!

  allAnnotations(orderBy: AnnotationOrderBy = ORDER_BY_MSM,
                 sortingOrder: SortingOrder = DESCENDING,
                 offset: Int = 0, limit: Int = 10,
                 filter: AnnotationFilter = {database: "HMDB"},
                 datasetFilter: DatasetFilter = {}): [Annotation]

  countAnnotations(filter: AnnotationFilter = {database: "HMDB"},
                   datasetFilter: DatasetFilter = {}): Int!

  annotation(id: String!): Annotation

  metadataSuggestions(field: String!, query: String!): [String!]!
}

type Mutation {
  # FIXME: require a valid token for submissions as well as updates
  submitDataset(jwt: String!, name: String, path: String!, metadataJson: String!): String
  updateMetadata(jwt: String!, datasetId: String!, metadataJson: String!): String
  deleteDataset(jwt: String!, datasetId: String!): String
}

schema {
  query: Query
  mutation: Mutation
}
